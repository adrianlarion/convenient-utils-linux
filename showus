#!/bin/bash
# Originally written by Adrian 'Scheff' Larion
# How much space a user occupies in dir

#COLORS
green=`tput setaf 2`
blue=`tput setaf 4`
bold=`tput bold`
col_reset=`tput sgr0`

tmp_du_exe=
help(){
	echo -e "\nABOUT: showus stands for show User Space or show Usage, as you like"
	echo -e "\nDESCRIPTION: Show how much space a user's files occupy in a a dir\n"
	echo -e "USAGE: ${0##*/}  [-u <username>] [-d <dirname>] [-k] [-s] [-C] [-F] [-h]\n"

	echo -e "\n${blue}'${0##*/} '${col_reset}\n #Show verbose, current dir, current user, including count files and human readable output " 

	echo -e "\n${blue}'${0##*/} -u sshd '${col_reset}\n #Show verbose, current dir, 'sshd'  user, including count files and human readable output " 

	echo -e "\n${blue}'for u in root sshd; do ${0##*/} -u $u -d ~; done '${col_reset}\n #Show verbose, in home dir, including count files and human readable output FOR users 'ssh' and 'root'  " 


	echo -e "\n${blue}'${0##*/} -u someuser -d /home/someuser -s'${col_reset}\n #Show for user someuser in dir /home/someuser. Verbose ouptut, including count files." 
	echo -e "\n${blue}'${0##*/} -sCk'${col_reset}\n # Show for current user, current dir, no count files, no verbose, no KiB/MiB/etc after output" 
	echo -e "\n${blue}'${0##*/} -sd /var/'${col_reset}\n # Show for current user, no verbose, in dir /var" 
	echo -e "\n${blue}'${0##*/} -skC | awk '{print \"raw kibibytes\" \$1}' '${col_reset}\n # Show for current user, no verbose, no count files, in current dir. Pipe the raw kibibytes value to awk\n" 

	echo -e "Available options: \n
		-u  Username for which to calculate space usage. Default current user.
		-d  Dir to perform analysis. Default '.'
		-k  Show in Kibibytes without any unit of measure (like 'du') if this option is on. By default this option is OFF and it will show something like '1.5 MiB'
		-s  Force silent (no verbose). Default OFF. Use to further parse or pipe the results.
		-C  DON'T show file count.
		-F  Strip tput colored formatting. By default -s will strip the formatting. By using this without -s you'll get the verbose output minus tput extra codes. Useful for further text parsing
		-h  Help
		" 
	}

strip_format(){
	green=""
	blue=""
	bold=""
	col_reset=""
}

user_exists(){
	grep "^${1}:" /etc/passwd 1>/dev/null && return 0
	return 1
}


convert_to_h(){
	res=$1
	if (($1 < 1024)); then 
		res=$( echo "$1" | awk '{  printf "%.2f KiB",$1}');
	elif (($1 >=1024)) && (($1 <1048576)); then
		res=$( echo "$1" | awk '{ $1/=1024; printf "%.2f MiB",$1}');
	elif (($1 >=1048576)) && (($1 < 1073741824)); then
		res=$( echo "$1" | awk '{ $1/=1048576; printf "%.2f GiB",$1}');
	elif (($1 >=1073741824)) && (($1 < 1099511627776)); then
		res=$( echo "$1" | awk '{ $1/=1073741824; printf "%.2f TiB",$1}');
	elif (($1 >=1099511627776)); then
		res=$( echo "$1" | awk '{ $1/=1099511627776; printf "%.2f PiB",$1}');
	fi
	echo $res
}

create_du_exe(){
	# Clean up code if exit prematurely
	#Write file
	tmp_du_exe=$(mktemp)
	echo '
	#!/bin/bash
	if [ -z "$1" ]; then echo ""
	else
		du "$1"
	fi' > $tmp_du_exe
	chmod +x $tmp_du_exe
}


remove_du_exe(){
	if [ -e "$tmp_du_exe" ]; then rm "$tmp_du_exe"; fi
}
	


# Process opts
while getopts ":u:d:kshCF" opts; do
	case "${opts}" in 
		u)
			u=${OPTARG}
			if ! user_exists $u;
			then echo "user '$u' doesn't exist " >&2; exit 1
			fi
			;;
		d)
			d=${OPTARG}
			if ! [ -d "$d" ];
			then echo "'$d' Doesn't exist or it's not a dir" >&2; exit 1
			fi
			;;
		k)
			k=1
			;;
		s)
			s=1
			;;

		h)
			help 
			exit 0
			;;
		C)
			C=1
			;;
		F)
			F=1
			;;
		:)
			echo "-${OPTARG} requires an argument" >&2; exit 1
			;;
		*)
			help; exit 0
			;;




	esac
done

# set defaults
d=${d:=.} # current dir
if [[ "$d" == '.' ]]; then 
	d=$(pwd) 
fi
# add slash to dir if missing (find needs it)
if ! [[ "$d" == */ ]]; then
	d=$d/
fi
#
u=${u:=$(whoami)} # current user

#Empty tput coloring if silent
if [[ $s == 1 ]] || [[ $F == 1 ]]; then
	strip_format
fi

# show starting message
if ! [[ $s == 1 ]]; then 
	echo -e "\nPROCESSING USER ${green}${bold}'$u'${col_reset} in dir ${blue}${bold}'${d}'${col_reset}"
fi



# create temp exe, otherwise very hard to process files with spaces and other
create_du_exe 
#clean on sudden exit
trap "rm \"$tmp_du_exe\" ; exit 1" SIGINT SIGTERM
# Do the work
find_res=$(find "$d" -user "$u" -type f -print0 2>/dev/null |  xargs --null -n1 $tmp_du_exe | cut -f1 | awk 'BEGIN {totalkb=0; totalfiles=0} !/^$/{totalkb+=$1; totalfiles+=1} END {printf "%s %s",totalkb, totalfiles}' )
totalkb=$(echo "$find_res" | cut -f1 -d' ')
totalfiles=$(echo "$find_res" | cut -f2 -d' ')
# Remove temp file
remove_du_exe






# Print human readable
if ! [[ $k == 1 ]]; then
	#show size
	echo  "${green}${bold}$(convert_to_h $totalkb)${col_reset}"
	# show files
	if ! [[ $C == 1 ]]; then 
		echo "${blue}${bold}$totalfiles files${col_reset}"
	fi
else 
	#show size
	echo $totalkb 
	# show files
	if ! [[ $C == 1 ]]; then 
		echo "$totalfiles files"
	fi
fi
# exit succesfully
exit 0


